name: Build & Deploy Fullstack React + Node App

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [main]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install and test backend
      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

#      - name: Run backend tests
 #       working-directory: ./server
  #      run: npm test

      # Install and test frontend
      - name: Install frontend dependencies
        working-directory: ./client
        run: npm ci

      - name: Run frontend tests
        working-directory: ./client
        run: npm test -- --watchAll=false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tag
        id: set-tag
        run: echo "image-tag=${{ secrets.DOCKER_USERNAME }}/my-fullstack-app:latest" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .                 # assumes Dockerfile is at project root
          file: ./Dockerfile
          push: true
          tags: ${{ steps.set-tag.outputs.image-tag }}

  deploy-to-azure:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set deployment variables
        run: |
          echo "RESOURCE_GROUP=my-first-rg" >> $GITHUB_ENV
          echo "CONTAINERAPP_ENV=my-container-env" >> $GITHUB_ENV
          echo "APP_NAME=my-container-app-node" >> $GITHUB_ENV
          echo "LOCATION=eastus" >> $GITHUB_ENV
          echo "IMAGE=${{ secrets.DOCKER_USERNAME }}/my-fullstack-app:latest" >> $GITHUB_ENV

      - name: Set backend internal URL
        run: echo "BACKEND_API_URL=http://my-container-app-spring.internal" >> $GITHUB_ENV
      
      - name: Create Container App Environment if not exists
        run: |
          az containerapp env show \
            --name $CONTAINERAPP_ENV \
            --resource-group $RESOURCE_GROUP \
          || az containerapp env create \
            --name $CONTAINERAPP_ENV \
            --resource-group $RESOURCE_GROUP \
            --location $LOCATION

      - name: Deploy or Update Container App
        run: |
          az containerapp show \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
          && az containerapp update \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --image $IMAGE \
            --env-vars API_URL=$BACKEND_API_URL \
          || az containerapp create \
            --name $APP_NAME \
            --resource-group $RESOURCE_GROUP \
            --environment $CONTAINERAPP_ENV \
            --image $IMAGE \
            --target-port 80 \
            --ingress external \
            --env-vars API_URL=$BACKEND_API_URL \
            --min-replicas 0 \
            --max-replicas 1 